apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}

group = 'etri'
version = '20.02.12'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
	maven {
		url "http://repo.boundlessgeo.com/main/"
	}
    mavenCentral()
}

ext.groovy_version = '2.5.7'

dependencies {
	compile project(':marmot.client')
	compile "org.codehaus.groovy:groovy:${groovy_version}"
}

shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}


task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.charSet = 'UTF-8'
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		marmotScript(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

ext.distDir = "${System.env.HOME}/etc/marmot/marmot.script.dist"
task distributeBinary(type:Copy) {
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include '*.properties'
		include '*.mcs'
		include '*.mps'
		include '.gitignore'
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}